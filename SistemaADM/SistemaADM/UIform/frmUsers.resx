<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        /wLIDfBmb56vOgAAAABJRU5ErkJggg==
</value>
  </data>
</root>